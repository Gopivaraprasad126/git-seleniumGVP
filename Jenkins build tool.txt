build  test  deploy

->Running automation test cases in Jenkins involves a series of steps to set up, configure, and execute the tests automatically. Below are the steps involved in setting up Jenkins to run your automation test cases (assuming you are using Selenium with Java and Maven for your project):

1. Install Jenkins
==================
Download and install Jenkins from the official site (https://www.jenkins.io/download/).
After installation, start Jenkins by running the following command:
java -jar jenkins.war
Open Jenkins in your browser at http://localhost:8080.

2. Set Up Jenkins
==================
Initial Setup: During the first startup, Jenkins will prompt you to unlock it using the admin password found in the log or in a specified file.
Install Plugins:
Jenkins will prompt you to install some recommended plugins. These include plugins for Git, Maven, JUnit, TestNG, and other essential plugins for CI.
You can also manually install the "Maven Integration", "Git Plugin", and "JUnit 
Plugin" from Manage Jenkins > Manage Plugins
.
3. Create a New Jenkins Job
===========================
Step 1: Create Job:
On the Jenkins dashboard, click on "New Item".
Select "Freestyle Project" or "Pipeline" depending on your requirements, and give it a name.
Click "OK" to create the job.
Step 2: Configure Git Repository:
In the job configuration page:
Under the Source Code Management section, select Git.
Provide the Git Repository URL (e.g., from GitHub) and, if needed, the credentials for accessing the repository.
Step 3: Build Trigger (optional):
Under the Build Triggers section, you can set Jenkins to automatically run your tests:
Poll SCM: Jenkins will check for changes in the Git repository at specified intervals (e.g., H/5 * * * * will check every 5 minutes).
Build periodically: Schedule regular builds regardless of changes.
GitHub Webhook: Trigger builds automatically when a commit is pushed to the repository.

4. Configure the Build Section
===============================
Step 1: Select Build Tool:

Under the Build section:
If you are using Maven, select Invoke top-level Maven targets.
In the Goals field, add:
bash
Copy code
clean test
This will clean the workspace and run the test cases defined in your pom.xml file.
Step 2: Define Commands (Optional):

If you want to use Shell/Batch Commands (for custom scripts), select Execute Shell and provide commands such as:
bash
Copy code
mvn clean test

5. Post-Build Actions (Optional)
================================
Step 1: Set Up Reporting:
You can configure Jenkins to publish reports such as JUnit reports or TestNG reports.
In Post-build Actions, select Publish JUnit test result report and provide the path to your test results (e.g., **/target/surefire-reports/*.xml for JUnit).
Step 2: Send Email Notifications:
Jenkins can send email notifications if a build fails or succeeds. To configure this, install the Email Extension Plugin and set up notifications under Post-build Actions.
6. Trigger the Jenkins Build
============================
Once everything is configured:
Click on "Build Now" to run your job manually for the first time.
Jenkins will check out the code from the Git repository, run the tests using Maven (or any build tool you configured), and show the results in the Console Output.
7. View Test Results
=====================
After the test execution is complete:
Console Output: You can view the entire log for the build in the Jenkins job's Console Output.
JUnit/TestNG Reports: If you have configured JUnit/TestNG post-build actions, Jenkins will display the test results under the Test Result section.
You can configure Jenkins to archive and display screenshots, reports, or any output generated by your automation suite.
Pipeline Configuration (Optional)
If you prefer using Jenkins Pipelines for better control, you can define the pipeline steps in a Jenkinsfile that is stored in your repository:

groovy
Copy code
pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/your-repo.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'mvn clean test'
            }
        }
    }
    post {
        always {
            junit 'target/surefire-reports/*.xml'
        }
    }
}
Common Jenkins Setup Issues
JDK and Maven Setup:
Make sure you have installed JDK and Maven on the Jenkins server and configured them under Manage Jenkins > Global Tool Configuration.
Git Credentials:
If your repository is private, ensure that Jenkins has the correct credentials to access the repository.
Summary of Steps:
Install Jenkins.
Set up a Jenkins job: Define a project, configure Git, and set build triggers.
Configure build steps: Use Maven or other build tools to run your automation test cases.
Post-build actions: Set up reports and notifications.
Run the build: Execute tests manually or automatically via triggers.
View results: Access console output, test reports, and logs.
Let me know if you'd like more details about any specific step!






